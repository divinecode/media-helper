import os
import re
import requests
from telegram import Update
from telegram import constants
from telegram.ext import (
    Application,
    MessageHandler,
    CommandHandler,
    ContextTypes,
    filters
)
import yt_dlp
from telebot.types import ReactionTypeEmoji

BOT_TOKEN = os.environ.get("BOT_TOKEN", "")
BOT_USERNAME = os.environ.get("BOT_USERNAME", "")

ALLOWED_USERNAMES = os.environ.get("ALLOWED_USERNAMES", "")
ALLOWED_USERNAMES = [u.strip() for u in ALLOWED_USERNAMES.split(",") if u.strip()]

TIKTOK_LINK_REGEX = re.compile(r"https?://(?:vt\.)?(?:www\.)?tiktok\.com/[\w\-/.@]+")
TIKTOK_VIDEO_ID_REGEX = re.compile(r"/video/(\d+)")

cookies_file = 'cookies.txt'

def resolve_tiktok_url(short_url: str) -> str:
    """
    –†–∞–∑—Ä–µ—à–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫—É—é —Å—Å—ã–ª–∫—É TikTok –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π URL.
    """
    try:
        response = requests.head(short_url, allow_redirects=True, timeout=10)
        return response.url
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–∏: {e}")
        return ""

def extract_video_id(tiktok_url: str) -> str | None:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –≤–∏–¥–µ–æ –∏–∑ –ø–æ–ª–Ω–æ–π —Å—Å—ã–ª–∫–∏ TikTok.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –≤–∏–¥–µ–æ –∏–ª–∏ None, –µ—Å–ª–∏ ID –Ω–µ –Ω–∞–π–¥–µ–Ω.
    """
    match = TIKTOK_VIDEO_ID_REGEX.search(tiktok_url)
    if match:
        return match.group(1)
    return None

async def download_tiktok_video(tiktok_url: str) -> bytes | None:
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ —Å TikTok —á–µ—Ä–µ–∑ tikcdn.io, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—è —É–∫–æ—Ä–æ—á–µ–Ω–Ω—ã–µ –∏ –ø–æ–ª–Ω—ã–µ —Å—Å—ã–ª–∫–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–π—Ç—ã –≤–∏–¥–µ–æ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    try:
        if "vt.tiktok.com" in tiktok_url:
            tiktok_url = resolve_tiktok_url(tiktok_url)
            if not tiktok_url:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å –∫–æ—Ä–æ—Ç–∫—É—é —Å—Å—ã–ª–∫—É.")
                return None

        video_id = extract_video_id(tiktok_url)
        if not video_id:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –≤–∏–¥–µ–æ –∏–∑ —Å—Å—ã–ª–∫–∏.")
            return None

        print(f"ID –≤–∏–¥–µ–æ: {video_id}")
        download_url = f"https://tikcdn.io/ssstik/{video_id}"

        headers = {
            "User-Agent": (
                "Mozilla/5.0 (Windows NT 10.0; Win64; x64)"
                " AppleWebKit/537.36 (KHTML, like Gecko)"
                " Chrome/108.0.0.0 Safari/537.36"
            ),
            "Referer": "https://www.tiktok.com/",
        }
        response = requests.get(download_url, headers=headers, timeout=10)
        response.raise_for_status()

        return response.content
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ: {e}")
        return None

async def download_youtube_shorts(url: str) -> bytes | None:
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–æ–µ (–Ω–µ –±–æ–ª–µ–µ 1 –º–∏–Ω—É—Ç—ã) –≤–∏–¥–µ–æ —Å YouTube (Shorts) —á–µ—Ä–µ–∑ yt-dlp.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–π—Ç—ã –≤–∏–¥–µ–æ –∏–ª–∏ None, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∏–ª–∏ –≤–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ.
    """
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ –±–µ–∑ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        ydl_opts_info = {
            'quiet': True,
            'no_warnings': True,
            'skip_download': True,
            'simulate': True,  
            'cookies': cookies_file,
            'proxy': 'socks5://208.102.51.6:58208'
        }
        with yt_dlp.YoutubeDL(ydl_opts_info) as ydl:
            info = ydl.extract_info(url, download=False)
            duration = info.get('duration', 0)
            if duration > 60:
                print("–í–∏–¥–µ–æ –¥–ª–∏–Ω–Ω–µ–µ 1 –º–∏–Ω—É—Ç—ã, —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ.")
                return None

        # –¢–µ–ø–µ—Ä—å —Å–∫–∞—á–∏–≤–∞–µ–º –≤ —Ñ–∞–π–ª
        ydl_opts_download = {
            'quiet': True,
            'no_warnings': True,            
            'outtmpl': 'temp_video.%(ext)s',          
            'cookies': cookies_file,
            'proxy': 'socks5://208.102.51.6:58208',
            'format': 'bestvideo+bestaudio/best',  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
            'merge_output_format': 'mp4',          # –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –≤ mp4            
            'postprocessors': [{
                'key': 'FFmpegVideoConvertor',
                'preferedformat': 'mp4'  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ mp4 (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
            }],
        }
        with yt_dlp.YoutubeDL(ydl_opts_download) as ydl:
            ydl.download([url])

        # –ò—â–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
        downloaded_file = None
        for ext in ['mp4', 'mkv', 'webm']:
            potential_path = f"temp_video.{ext}"
            if os.path.exists(potential_path):
                downloaded_file = potential_path
                break

        if not downloaded_file:
            print("–ù–µ –Ω–∞–π–¥–µ–Ω —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª youtube.")
            return None

        with open(downloaded_file, 'rb') as f:
            video_data = f.read()

        os.remove(downloaded_file)
        return video_data

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ —Å Youtube: {e}")
        return None

def bot_was_mentioned(update: Update) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É–ø–æ–º—è–Ω—É—Ç –ª–∏ –±–æ—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ (—á–µ—Ä–µ–∑ @BOT_USERNAME).
    """
    message = update.effective_message
    if not message or not message.entities:
        return False

    for entity in message.entities:
        if entity.type == "mention":
            mention_text = message.parse_entity(entity)
            if mention_text.lower() == f"@{BOT_USERNAME}".lower():
                return True
    return False

def extract_links(message: str) -> list[str]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ —Å—Å—ã–ª–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    urls = re.findall(r'(https?://\S+)', message)
    return urls

async def handle_mentions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /download. 
    –ñ–¥—ë–º —Å—Å—ã–ª–∫—É –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö –∏ —Å–∫–∞—á–∏–≤–∞–µ–º –ª–∏–±–æ TikTok, –ª–∏–±–æ YouTube Shorts.
    """
    message = update.effective_message
    user = update.effective_user

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö
    #if ALLOWED_USERNAMES and (not user or user.username not in ALLOWED_USERNAMES):
    #    await message.reply_text("–¢—ã –Ω–µ –º–æ–∂–µ—à—å —Å–∫–∞—á–∏–≤–∞—Ç—å –≤–∏–¥–µ–æ.")
    #    return

    #args = context.args
    #if not args:
    #    await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Å—Å—ã–ª–∫—É: /download <URL>")
    #    return
    if not bot_was_mentioned(update):
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞

    text = message.text or ""
    url = extract_links(text)[0]
    #await context.bot.set_message_reaction(
    #    message.chat.id,
    #    message.message_id,
    #    [ReactionTypeEmoji('üëç')],
    #    is_big=False
    #)
    try:
        if "tiktok.com" in url.lower():            
            video_data = await download_tiktok_video(url)
            if not video_data:
                await message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–ª–∏ –≤–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
                return
            await message.reply_video(
                video=video_data                
            )
        elif "youtube.com" in url.lower() or "youtu.be" in url.lower():            
            video_data = await download_youtube_shorts(url)
            if video_data is None:
                await message.reply_text(
                    "–í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–±–æ–ª–µ–µ 1 –º–∏–Ω—É—Ç—ã) –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."
                )
                return
            await message.reply_video(
                video=video_data            
            )
        else:
            await message.reply_text("–Ø —É–º–µ—é —Å–∫–∞—á–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ TikTok –∏ YouTube Shorts!")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ /download: {e}")
        await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ (TikTok –∏ YouTube Shorts).\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /download <—Å—Å—ã–ª–∫–∞>, —á—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –¥–æ 1 –º–∏–Ω—É—Ç—ã."
    )

async def handle_other_messages(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–µ —è–≤–ª—è—é—â–∏—Ö—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏.
    –ë–æ—Ç —Ä–µ–∞–≥–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–ø–æ–º—è–Ω—É—Ç. –ò–Ω–∞—á–µ –º–æ–ª—á–∏—Ç.
    """
    if bot_was_mentioned(update):
        # –î–∞—ë–º –∫–æ—Ä–æ—Ç–∫—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É, –µ—Å–ª–∏ –±–æ—Ç —è–≤–Ω–æ —É–ø–æ–º—è–Ω—É—Ç
        await update.effective_message.reply_text(
            "–ß—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /download <—Å—Å—ã–ª–∫–∞>.\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è TikTok –∏ –∫–æ—Ä–æ—Ç–∫–∏–µ –≤–∏–¥–µ–æ YouTube (–¥–æ 1 –º–∏–Ω—É—Ç—ã)."
        )
    else:
        # –ï—Å–ª–∏ –Ω–µ —É–ø–æ–º—è–Ω—É–ª–∏ ‚Äî –±–æ—Ç –º–æ–ª—á–∏—Ç (–Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç)
        return

def main():
    app = Application.builder().token(BOT_TOKEN).build()
    
    # –ö–æ–º–∞–Ω–¥—ã
    #app.add_handler(CommandHandler("start", start_command))
    #app.add_handler(CommandHandler("download", handle_download))

    # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    app.add_handler(MessageHandler(filters.ALL, handle_mentions))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...")
    app.run_polling()

if __name__ == "__main__":
    main()
